[gd_scene load_steps=7 format=3 uid="uid://ctrb27cg72b6g"]

[ext_resource type="Texture2D" uid="uid://c2fnxldgd862f" path="res://PNG/Green/texture_03.png" id="1_17vca"]
[ext_resource type="Script" path="res://hydra.gd" id="1_pq181"]

[sub_resource type="SphereShape3D" id="SphereShape3D_law8v"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_2uq82"]
albedo_texture = ExtResource("1_17vca")

[sub_resource type="SphereMesh" id="SphereMesh_j34hx"]
material = SubResource("StandardMaterial3D_2uq82")

[sub_resource type="GDScript" id="GDScript_pcwfl"]
script/source = "extends Camera3D

@onready var camera_pivot = $\"../..\"
@onready var camera_rod = $\"..\"

@export var camera_min_vertical_rotation : float = -75.0
@export var camera_max_vertical_rotation : float = 75.0
@export var mouse_sensitivity : float = 0.15

# Called when the node enters the scene tree for the first time.
func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	
	pass


func rotate_camera(camera_direction : Vector2) -> void:
	camera_pivot.rotate_y(-camera_direction.x)

	camera_rod.rotate_x(-camera_direction.y)
		
	# Limit vertical rotation
	camera_rod.rotation_degrees.x = clamp(
		camera_rod.rotation_degrees.x,
		camera_min_vertical_rotation, camera_max_vertical_rotation
	)

func _unhandled_input(event: InputEvent) -> void:
	process_mouse_input(event)


func process_mouse_input(event : InputEvent) -> void:
	# Cursor movement
	if event is InputEventMouseMotion:
		var camera_direction = Vector2(
			deg_to_rad(event.relative.x * mouse_sensitivity),
			deg_to_rad(event.relative.y * mouse_sensitivity))
		
		rotate_camera(camera_direction)
#		if !self.is_cursor_visible:
#			rotate_camera(camera_direction)
	
	# Scrolling
#	elif event is InputEventMouseButton:
#		if event.is_pressed() and not self.is_cursor_visible:
#			if event.button_index == MOUSE_BUTTON_WHEEL_UP:
#				if camera_zoom == camera_min_zoom_distance:
#					fpv = true
#				self.camera_zoom -= camera_zoom_step
#			if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
#				if fpv:
#					fpv = false
#				else:
#					self.camera_zoom += camera_zoom_step
"

[node name="Hydra" type="CharacterBody3D"]
collision_layer = 2
collision_mask = 11
script = ExtResource("1_pq181")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_law8v")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("SphereMesh_j34hx")

[node name="Indicator" type="Label3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.883044, 0)
text = "V"

[node name="CameraPivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.71525, 0)

[node name="CameraRod" type="Node3D" parent="CameraPivot"]

[node name="Camera3D" type="Camera3D" parent="CameraPivot/CameraRod"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4.27079)
script = SubResource("GDScript_pcwfl")

[node name="NeckPoint" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
